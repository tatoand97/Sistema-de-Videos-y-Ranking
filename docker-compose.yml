services:
  redis:
    image: redis:7-alpine
    command: ["redis-server","--appendonly","yes"]
    ports: ["6379:6379"]
    volumes: [redis-data:/data]
    restart: unless-stopped
    healthcheck:
      test: ["CMD","redis-cli","ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  rabbitmq:
    image: rabbitmq:3.13-management-alpine
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
      - rabbitmq-logs:/var/log/rabbitmq
      - ./rabbitmq/enabled_plugins:/etc/rabbitmq/enabled_plugins:ro
      - ./rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf:ro
      - ./rabbitmq/definitions.json:/etc/rabbitmq/definitions.json:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD","rabbitmq-diagnostics","-q","ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: app_user
      POSTGRES_PASSWORD: app_password
      POSTGRES_DB: videorank
    ports: ["5432:5432"]
    volumes: [pg-data:/var/lib/postgresql/data]
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL","pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5

  migrate:
    image: migrate/migrate:4
    container_name: app_migrate
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./Api/internal/infrastructure/migrations:/migrations:ro
    environment:
      DATABASE_URL: postgres://app_user:app_password@postgres:5432/videorank?sslmode=disable
    entrypoint: ["/bin/sh","-c"]
    command: |
      echo "Listing /migrations to verify mount:" \
      && ls -la /migrations \
      && /usr/local/bin/migrate -path=/migrations -database "$$DATABASE_URL" up
    restart: "no"

  api:
    build:
      context: ./Api
    container_name: app_api
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
      minio-buckets:
        condition: service_completed_successfully
    environment:
      DATABASE_URL: postgres://app_user:app_password@postgres:5432/videorank?sslmode=disable
      JWT_SECRET: 6EPOc2/6veZ71FAJSF68iv21ho83NLQSaycHEGTTjGO9TBmRsphMp5JqgieFTcGn
      PORT: "8080"
      CORS_ORIGIN: "*"
      UPLOAD_DIR: "/uploads"

      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: minio
      MINIO_SECRET_KEY: minio12345
      MINIO_BUCKET: raw-videos-audio-removal
      MINIO_USE_SSL: "false"
      # RabbitMQ to publish processing jobs
      RABBITMQ_URL: amqp://admin:admin@rabbitmq:5672/
      STATES_MACHINE_QUEUE: states_machine_queue
    restart: unless-stopped
    healthcheck:
      test: [ "CMD","wget","--no-verbose","--tries=1","--spider","http://localhost:8080/health" ]
      interval: 30s
      timeout: 10s
      retries: 3

  minio:
    image: minio/minio:latest
    command: ["server","/data","--console-address",":9001"]
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: minio12345
    ports: ["9000:9000","9001:9001"]
    volumes: [minio-data:/data]
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3

  minio-buckets:
    image: minio/mc
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      until /usr/bin/mc alias set myminio http://minio:9000 minio minio12345; do
        echo 'Waiting for MinIO to be ready...'
        sleep 2
      done;
      /usr/bin/mc mb myminio/raw-videos-audio-removal --ignore-existing;
      /usr/bin/mc mb myminio/processed-videos-audio-removal --ignore-existing;
      echo 'Buckets created successfully';
      exit 0;
      "
    restart: "no"

  nginx:
    image: nginx:1.27-alpine
    depends_on:
      api:
        condition: service_healthy
      minio:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    ports:
      - "8080:8080" # API Proxy
      - "8082:8082" # MinIO Console
      - "8083:8083" # RabbitMQ UI
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080"]
      interval: 30s
      timeout: 10s
      retries: 3

  audio-removal:
    build: ./Workers/AudioRemoval
    depends_on:
      rabbitmq:
        condition: service_healthy
      minio:
        condition: service_healthy
      minio-buckets:
        condition: service_completed_successfully
    environment:
      - RABBITMQ_URL=amqp://admin:admin@rabbitmq:5672/
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=minio
      - MINIO_SECRET_KEY=minio12345
      - RAW_BUCKET=raw-videos-audio-removal
      - PROCESSED_BUCKET=processed-videos-audio-removal
      - QUEUE_NAME=audio_removal_queue
    restart: unless-stopped

  trim-video:
    build:
      context: ./Workers/TrimVideo
    depends_on:
      rabbitmq:
        condition: service_healthy
      minio:
        condition: service_healthy
      minio-buckets:
        condition: service_completed_successfully
    restart: unless-stopped
    env_file:
      - ./Workers/TrimVideo/.env

  edit-video:
    build:
      context: ./Workers/EditVideo
    depends_on:
      rabbitmq:
        condition: service_healthy
      minio:
        condition: service_healthy
      minio-buckets:
        condition: service_completed_successfully
    restart: unless-stopped
    env_file:
      - ./Workers/EditVideo/.env

  watermarking:
    build:
      context: ./Workers/Watermarking
    depends_on:
      rabbitmq:
        condition: service_healthy
      minio:
        condition: service_healthy
      minio-buckets:
        condition: service_completed_successfully
    restart: unless-stopped
    env_file:
      - ./Workers/Watermarking/.env

  gossip-open-close:
    build:
      context: ./Workers/gossipOpenClose
    depends_on:
      rabbitmq:
        condition: service_healthy
      minio:
        condition: service_healthy
      minio-buckets:
        condition: service_completed_successfully
    restart: unless-stopped
    env_file:
      - ./Workers/gossipOpenClose/.env

volumes:
  redis-data:
  rabbitmq-data:
  rabbitmq-logs:
  pg-data:
  minio-data:
