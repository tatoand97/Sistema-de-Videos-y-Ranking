openapi: 3.1.0
jsonSchemaDialect: https://spec.openapis.org/oas/3.1/dialect/base
info:
  title: ANB Rising Stars Showcase API
  version: "1.0.0"
  description: >
    API para registro/login, carga de videos del usuario, consulta/borrado, endpoints públicos
    (listado, voto, ranking) y endpoints de serving/descarga de video. El procesamiento asíncrono
    NO expone endpoints (fuera de alcance).
servers:
  - url: https://api.example.com
tags:
  - name: Autenticación
  - name: Videos
  - name: Público
  - name: Ranking
  - name: Ubicación
security:
  - bearerAuth: []
paths:
  /api/auth/signup:
    post:
      summary: Registro de nuevos jugadores
      description: Crea un usuario. Valida email único y confirmación de contraseña.
      tags: [Autenticación]
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SignupRequest"
            example:
              first_name: "John"
              last_name: "Doe"
              email: "john@example.com"
              password1: "StrongPass123"
              password2: "StrongPass123"
              city: "Bogotá"
              country: "Colombia"
      responses:
        "201":
          description: Usuario creado exitosamente.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SignupResponse"
        "400":
          $ref: "#/components/responses/BadRequest"

  /api/auth/login:
    post:
      summary: Inicio de sesión (JWT)
      tags: [Autenticación]
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
            example:
              email: "john@example.com"
              password: "StrongPass123"
      responses:
        "200":
          description: Autenticación exitosa.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthToken"
              example:
                access_token: eyJ0eXAiOiJKV1QiLCJhbGci...
                token_type: "Bearer"
                expires_in: 3600
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"

  /api/auth/logout:
    post:
      summary: Cerrar sesión
      tags: [Autenticación]
      security:
        - bearerAuth: []
      responses:
        "204":
          description: No Content
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          description: Error interno
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }

  /api/me:
    get:
      summary: Verificar sesión del usuario
      description: Retorna un estado simple para confirmar autenticación.
      tags: [Autenticación]
      security:
        - bearerAuth: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: { type: string }
                  user_id: { type: integer }
                  permissions:
                    type: array
                    items: { type: string }
                  first_name: { type: string }
                  last_name: { type: string }
                  email: { type: string, format: email }
              example:
                status: "ok"
                user_id: 123
                permissions: ["videos:upload", "videos:read"]
                first_name: "John"
                last_name: "Doe"
                email: "john@example.com"
        "401": { $ref: "#/components/responses/Unauthorized" }

  /api/videos/upload:
    post:
      summary: Subir video del usuario (máx 100MB)
      description: |
        Sube archivo MP4 con título. El video queda en estado "uploaded".
        **Nota:** El documento ejemplo menciona `task_id`, pero no se expone control de jobs.
      tags: [Videos]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                video_file:
                  type: string
                  format: binary
                  description: Archivo de video MP4 (máx 100MB).
                title:
                  type: string
                checksum:
                  type: string
                  description: SHA-256 en hex (opcional).
                sizeBytes:
                  type: integer
                  minimum: 0
                mimeType:
                  type: string
                  default: video/mp4
              required: [video_file, title]
      responses:
        "201":
          description: Video subido correctamente. Procesamiento en curso.
          content:
            application/json:
              schema:
                type: object
                required: [message, task_id]
                properties:
                  message: { type: string, enum: ["Video subido correctamente. Procesamiento en curso."] }
                  task_id: { type: string }
              example:
                message: "Video subido correctamente. Procesamiento en curso."
                task_id: "123456"
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        # Opcional (extensión no normada por el documento):
        # "413": { $ref: "#/components/responses/PayloadTooLarge" }

  /api/videos:
    get:
      summary: Listar mis videos
      tags: [Videos]
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Lista de videos del usuario autenticado.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Video"
              example:
                - video_id: "123456"
                  title: "Mi mejor tiro de 3"
                  status: "processed"
                  uploaded_at: "2025-03-10T14:30:00Z"
                  processed_at: "2025-03-10T14:35:00Z"
                  processed_url: "https://anb.com/videos/processed/123456.mp4"
                - video_id: "654321"
                  title: "Habilidades de dribleo"
                  status: "uploaded"
                  uploaded_at: "2025-03-11T10:15:00Z"
        "401": { $ref: "#/components/responses/Unauthorized" }

  /api/videos/statuses:
    get:
      summary: Listar estados de procesamiento de video
      description: Devuelve el listado de estados posibles para un video.
      tags: [Videos]
      security: []
      responses:
        "200":
          description: Lista de estados disponibles.
          content:
            application/json:
              schema:
                type: object
                properties:
                  statuses:
                    type: array
                    items:
                      type: string
              example:
                statuses:
                  - "UPLOADED"
                  - "TRIMMING"
                  - "ADJUSTING_RESOLUTION"
                  - "ADDING_WATERMARK"
                  - "REMOVING_AUDIO"
                  - "ADDING_INTRO_OUTRO"
                  - "PROCESSED"
                  - "FAILED"

  /api/videos/{video_id}:
    get:
      summary: Obtener detalle de un video propio
      tags: [Videos]
      security:
        - bearerAuth: []
      parameters:
        - name: video_id
          in: path
          required: true
          schema: { type: string }
      responses:
        "200":
          description: Detalle del video.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Video"
              example:
                video_id: "a1b2c3d4"
                title: "Tiros de tres en movimiento"
                status: "processed"
                uploaded_at: "2025-03-15T14:22:00Z"
                processed_at: "2025-03-15T15:10:00Z"
                original_url: "https://anb.com/uploads/a1b2c3d4.mp4"
                processed_url: "https://anb.com/processed/a1b2c3d4.mp4"
                votes: 125
        "401": { $ref: "#/components/responses/Unauthorized" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "404": { $ref: "#/components/responses/NotFound" }
    delete:
      summary: Eliminar video propio (si permitido)
      tags: [Videos]
      security:
        - bearerAuth: []
      parameters:
        - name: video_id
          in: path
          required: true
          schema: { type: string }
      responses:
        "200":
          description: Eliminado.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
                  video_id: { type: string }
              example:
                message: "El video ha sido eliminado exitosamente."
                video_id: "a1b2c3d4"
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "404": { $ref: "#/components/responses/NotFound" }

  /api/videos/{video_id}/file:
    get:
      summary: Descargar/servir archivo del video (privado)
      description: Devuelve binario del **original** o **procesado** del dueño del video.
      tags: [Videos]
      security:
        - bearerAuth: []
      parameters:
        - name: video_id
          in: path
          required: true
          schema: { type: string }
        - name: variant
          in: query
          required: false
          schema:
            type: string
            enum: [original, processed]
            default: processed
          description: Variante a servir.
      responses:
        "200":
          description: Binario del video.
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        "401": { $ref: "#/components/responses/Unauthorized" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "404": { $ref: "#/components/responses/NotFound" }

  /api/public/videos:
    get:
      summary: Listar videos públicos disponibles para votación
      tags: [Público]
      security: []
      responses:
        "200":
          description: Lista de videos públicos.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PublicVideo"
        "400": { $ref: "#/components/responses/BadRequest" }

  /api/public/videos/{video_id}/vote:
    post:
      summary: Emitir voto por un video público
      tags: [Público]
      security:
        - bearerAuth: []
      parameters:
        - name: video_id
          in: path
          required: true
          schema: { type: string }
      responses:
        "200":
          description: Voto registrado.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VoteResponse"
              example:
                message: "Voto registrado exitosamente."
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "404": { $ref: "#/components/responses/NotFound" }

  /api/public/rankings:
    get:
      summary: Ranking de jugadores por votos acumulados
      tags: [Ranking]
      security: []
      parameters:
        - name: city
          in: query
          required: false
          schema: { type: string }
        - name: page
          in: query
          required: false
          schema: { type: integer, minimum: 1, default: 1 }
        - name: pageSize
          in: query
          required: false
          schema: { type: integer, minimum: 1, maximum: 100, default: 20 }
      responses:
        "200":
          description: Ranking actual.
          headers:
            X-Total-Count:
              description: Total de elementos (si se pagina).
              schema: { type: integer }
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/RankingEntry"
              example:
                - position: 1
                  username: superplayer
                  city: Bogotá
                  votes: 1530
                - position: 2
                  username: nextstar
                  city: Bogotá
                  votes: 1495
        "400": { $ref: "#/components/responses/BadRequest" }

  /api/uploads:
    post:
      summary: Crear URL firmada de subida (POST Policy S3)
      description: >
        Endpoint opcional (patrón S3-like). Incluir sólo si el almacenamiento lo requiere.
        **No está explicitado en el documento** (campos y semántica marcados TBD).
      tags: [Videos]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUploadRequest"
            example:
              filename: "clip.mp4"
              mimeType: "video/mp4"
              sizeBytes: 73400320
              checksum: "TBD_SHA256_HEX"
      responses:
        "201":
          description: URL y campos firmados para POST Policy
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateUploadResponsePostPolicy"
              example:
                uploadUrl: "https://minio.example.com/my-bucket"
                resourceUrl: "s3://my-bucket/uploads/2025/09/06/5a1d...-clip.mp4"
                expiresAt: "2025-09-06T23:59:59Z"
                form:
                  key: "uploads/2025/09/06/5a1d...-clip.mp4"
                  policy: "eyJleHBpcmF0aW9uIjoiMjAyNS0wOS..."
                  x-amz-algorithm: "AWS4-HMAC-SHA256"
                  x-amz-credential: "ACCESSKEY/20250906/auto/s3/aws4_request"
                  x-amz-date: "20250906T201122Z"
                  x-amz-signature: "b5f3a1..."
                  Content-Type: "video/mp4"
                  x-amz-meta-sha256: "a2c3...f9"
                  success_action_status: "201"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"

  /api/location/city-id:
    get:
      summary: Obtener city_id por país y ciudad
      description: Devuelve el identificador de ciudad a partir de nombres de país y ciudad (comparación case-insensitive).
      tags: [Ubicación]
      security: []
      parameters:
        - name: country
          in: query
          required: true
          schema: { type: string }
        - name: city
          in: query
          required: true
          schema: { type: string }
      responses:
        "200":
          description: Identificador de la ciudad.
          content:
            application/json:
              schema:
                type: object
                properties:
                  city_id: { type: integer }
              example: { city_id: 123 }
        "400": { $ref: "#/components/responses/BadRequest" }
        "404": { $ref: "#/components/responses/NotFound" }

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    BadRequest:
      description: Parámetros inválidos.
      content:
        application/json:
          schema: { $ref: "#/components/schemas/Error" }
          example: { error: "Bad Request", message: "Parámetro inválido." }
    Unauthorized:
      description: Falta de autenticación o token inválido.
      content:
        application/json:
          schema: { $ref: "#/components/schemas/Error" }
          example: { error: "Unauthorized", message: "Token inválido o expirado." }
    Forbidden:
      description: Acceso denegado.
      content:
        application/json:
          schema: { $ref: "#/components/schemas/Error" }
          example: { error: "Forbidden", message: "Acceso denegado." }
    NotFound:
      description: Recurso no encontrado.
      content:
        application/json:
          schema: { $ref: "#/components/schemas/Error" }
          example: { error: "Not Found", message: "Recurso no encontrado." }
    PayloadTooLarge:
      description: Tamaño de carga excedido (p. ej., >100MB).
      content:
        application/json:
          schema: { $ref: "#/components/schemas/Error" }
          example: { error: "Payload Too Large", message: "Tamaño de carga excedido." }
  schemas:
    Error:
      type: object
      properties:
        error: { type: string }
        message: { type: string }
    SignupRequest:
      type: object
      required: [first_name, last_name, email, password1, password2, city, country]
      properties:
        first_name: { type: string }
        last_name: { type: string }
        email: { type: string, format: email }
        password1: { type: string, format: password }
        password2: { type: string, format: password }
        city: { type: string }
        country: { type: string }
    SignupResponse:
      type: object
      properties:
        message: { type: string }
      example: { message: "Usuario creado exitosamente." }
    LoginRequest:
      type: object
      required: [email, password]
      properties:
        email: { type: string, format: email }
        password: { type: string, format: password }
    AuthToken:
      type: object
      required: [access_token, token_type, expires_in]
      properties:
        access_token: { type: string }
        token_type: { type: string, enum: ["Bearer"] }
        expires_in: { type: integer, format: int64 }
    Video:
      type: object
      required: [video_id, title, status, uploaded_at]
      properties:
        video_id: { type: string }
        title: { type: string }
        status: { type: string, enum: [uploaded, processed] }
        uploaded_at: { type: string, format: date-time }
        processed_at: { type: string, format: date-time, nullable: true }
        original_url: { type: string, format: uri, nullable: true }
        processed_url: { type: string, format: uri, nullable: true }
        votes: { type: integer, minimum: 0, nullable: true }
    PublicVideo:
      type: object
      required: [video_id, title]
      properties:
        video_id: { type: string }
        title: { type: string }
        processed_url: { type: string, format: uri, nullable: true }
        city: { type: string, nullable: true }
        votes: { type: integer, minimum: 0, nullable: true }
    VoteResponse:
      type: object
      properties:
        message: { type: string }
    RankingEntry:
      type: object
      required: [position, username, votes]
      properties:
        position: { type: integer, minimum: 1 }
        username: { type: string }
        city: { type: string, nullable: true }
        votes: { type: integer, minimum: 0 }
    CreateUploadRequest:
      type: object
      properties:
        filename: { type: string }
        mimeType: { type: string }
        sizeBytes: { type: integer, minimum: 0 }
        checksum:
          type: string
          description: "Opcional. SHA-256 en hex del archivo; se refleja en x-amz-meta-sha256."
      required: [filename, mimeType]
    CreateUploadResponsePostPolicy:
      type: object
      required: [uploadUrl, resourceUrl, expiresAt, form]
      properties:
        uploadUrl:
          type: string
          format: uri
          description: "Endpoint HTTPS del bucket MinIO/S3 que acepta POST multipart/form-data."
        resourceUrl:
          type: string
          description: "Identificador del objeto (s3://bucket/key o URL HTTP no firmada)."
        expiresAt:
          type: string
          format: date-time
        form:
          $ref: "#/components/schemas/S3PostPolicyForm"
    S3PostPolicyForm:
      type: object
      description: "Campos que el cliente debe enviar como fields del multipart/form-data a uploadUrl."
      properties:
        key: { type: string, description: "Ruta/clave del objeto dentro del bucket." }
        policy: { type: string }
        x-amz-algorithm: { type: string, enum: ["AWS4-HMAC-SHA256"] }
        x-amz-credential: { type: string }
        x-amz-date: { type: string }
        x-amz-signature: { type: string }
        Content-Type: { type: string }
        x-amz-meta-sha256: { type: string, nullable: true }
        success_action_status:
          type: string
          enum: ["201", "204"]
          default: "201"
      required:
        - key
        - policy
        - x-amz-algorithm
        - x-amz-credential
        - x-amz-date
        - x-amz-signature
        - Content-Type
