-- Extensiones
CREATE EXTENSION IF NOT EXISTS pgcrypto;

-- 1. Country
CREATE TABLE IF NOT EXISTS country (
                                       country_id  INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                       name        VARCHAR(100) NOT NULL UNIQUE,
    iso_code    CHAR(3) NOT NULL UNIQUE
    );

-- 2. City
CREATE TABLE IF NOT EXISTS city (
                                    city_id     INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                    country_id  INTEGER NOT NULL REFERENCES country(country_id),
    name        VARCHAR(100) NOT NULL,
    CONSTRAINT ux_city_country_name UNIQUE (country_id, name)
    );
CREATE INDEX IF NOT EXISTS idx_city_country ON city (country_id);
-- Countries: unique by LOWER(name)
CREATE UNIQUE INDEX IF NOT EXISTS ux_country_lower_name
    ON country (LOWER(name));

-- Cities: unique by (country_id, LOWER(name))
CREATE UNIQUE INDEX IF NOT EXISTS ux_city_country_lower_name
    ON city (country_id, LOWER(name));

-- 3. Users (incluye city_id)
CREATE TABLE IF NOT EXISTS users (
                                     user_id        SERIAL PRIMARY KEY,
                                     first_name     VARCHAR(255),
    last_name      VARCHAR(255),
    email          VARCHAR(255) NOT NULL UNIQUE,
    password_hash  VARCHAR(255) NOT NULL,
    city_id        INTEGER NOT NULL REFERENCES city(city_id),
    created_at     TIMESTAMPTZ NOT NULL DEFAULT now()
    );

-- 4. Role / Privilege / M:N
CREATE TABLE IF NOT EXISTS role (
                                    role_id     INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                    name        VARCHAR(50) NOT NULL UNIQUE,
    description VARCHAR(255)
    );

CREATE TABLE IF NOT EXISTS privilege (
                                         privilege_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                         name         VARCHAR(50) NOT NULL UNIQUE,
    description  VARCHAR(255)
    );

CREATE TABLE IF NOT EXISTS role_privilege (
                                              role_id        INTEGER NOT NULL REFERENCES role(role_id) ON DELETE CASCADE,
    privilege_id   INTEGER NOT NULL REFERENCES privilege(privilege_id) ON DELETE CASCADE,
    assigned_at    TIMESTAMPTZ NOT NULL DEFAULT now(),
    PRIMARY KEY (role_id, privilege_id)
    );
CREATE INDEX IF NOT EXISTS idx_role_privilege_priv ON role_privilege (privilege_id);

CREATE TABLE IF NOT EXISTS user_role (
                                         user_id      INTEGER NOT NULL REFERENCES users(user_id) ON DELETE CASCADE,
    role_id      INTEGER NOT NULL REFERENCES role(role_id) ON DELETE CASCADE,
    assigned_at  TIMESTAMPTZ NOT NULL DEFAULT now(),
    PRIMARY KEY (user_id, role_id)
    );
CREATE INDEX IF NOT EXISTS idx_user_role_r ON user_role (role_id);

DO $$
    BEGIN
        IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'video_status') THEN
            CREATE TYPE video_status AS ENUM (
                'UPLOADED',
                'TRIMMING',
                'ADJUSTING_RESOLUTION',
                'ADDING_WATERMARK',
                'REMOVING_AUDIO',
                'ADDING_INTRO_OUTRO',
                'PROCESSED',
                'FAILED'
                );
        END IF;
    END $$;

-- 2) Tabla
CREATE TABLE IF NOT EXISTS video (
                                     video_id       INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                     user_id        INTEGER NOT NULL REFERENCES users(user_id) ON DELETE CASCADE,
    title          VARCHAR(255) NOT NULL,
    original_file  VARCHAR(255) NOT NULL,
    processed_file VARCHAR(255),
    status         video_status NOT NULL DEFAULT 'UPLOADED',
    uploaded_at    TIMESTAMPTZ NOT NULL DEFAULT now(),
    processed_at   TIMESTAMPTZ,
    CONSTRAINT ck_processed_at
    CHECK (processed_at IS NULL OR status = 'PROCESSED')
    );


CREATE INDEX IF NOT EXISTS ix_video_status ON video (status);
CREATE INDEX IF NOT EXISTS idx_video_user   ON video (user_id);

-- 7. Vote
CREATE TABLE IF NOT EXISTS vote (
                                    vote_id    INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                    user_id    INTEGER NOT NULL REFERENCES users(user_id) ON DELETE CASCADE,
    video_id   INTEGER NOT NULL REFERENCES video(video_id) ON DELETE CASCADE,
    voted_at   TIMESTAMPTZ NOT NULL DEFAULT now(),
    CONSTRAINT unique_vote_user_video UNIQUE (user_id, video_id)
    );
CREATE INDEX IF NOT EXISTS idx_vote_user  ON vote (user_id);
CREATE INDEX IF NOT EXISTS idx_vote_video ON vote (video_id);
